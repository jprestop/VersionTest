#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Python Embedding 
\begin_inset CommandInset label
LatexCommand label
name "chap:App_F_Python_Embedding"

\end_inset


\end_layout

\begin_layout Standard
As of release 8.0, MET includes the ability to embed Python to a limited
 degree.
 Users may use Python scripts and whatever associated Python packages they
 wish in order to prepare 2D gridded data fields for reading by the MET
 tools.
 We fully expect that this degree of embedding will increase in the future.
 In addition, plans are in place to extend Python with MET in upcoming realeases
, allowing users to invoke MET tools directly from their Python script.
 Currently only use of Python 2.x is supported, but this will soon be changing
 to Python 3.
\end_layout

\begin_layout Standard
In order to use Python embedding, the user's local Python installation must
 have the C-language Python header files and libraries.
 Sometimes when Python is installed locally, these header files and libraries
 are deleted at the end of the installation process, leaving only the binary
 executable and run-time shared object files.
 But the Python header files and libraries must be present to compile support
 in MET for Python embedding.
 Assuming the requisite Python files are present, and that Python embedding
 is enabled when building MET (which is done by passing the 
\family typewriter
--enable-python
\family default
 option to the 
\family typewriter
configure
\family default
 command line), the MET C++ code will use these in the compilation process
 to link directly to the Python libraries.
\end_layout

\begin_layout Standard
In addition to the 
\family typewriter
configure
\family default
 option mentioned above, two variables, 
\family typewriter
MET_PYTHON_CC
\family default
 and 
\family typewriter
MET_PYTHON_LD
\family default
, must also be set for the configuration process.
 These may either be set as environment variables or as command line options
 to 
\family typewriter
configure
\family default
.
 These constants as passed as compiler command line options when building
 MET to enable the compiler to find the requisite Python header files and
 libraries in the user's local filesystem.
 Fortunately, Python provides a way to set these variables properly.
 This frees the user from the necessity of having any expert knowledge of
 the compiling and linking process.
 Along with the 
\family typewriter
Python
\family default
 executable, there should be another executable called 
\family typewriter
python-config, 
\family default
whose output can be used to set these environment variables as follows:
\end_layout

\begin_layout Itemize
On the command line, run 
\begin_inset Quotes eld
\end_inset


\family typewriter
python-config --cflags
\family default

\begin_inset Quotes erd
\end_inset

.
 Set the value of 
\family typewriter
MET_PYTHON_CC 
\family default
to the output of that command.
\end_layout

\begin_layout Itemize
Again on the command line, run 
\begin_inset Quotes eld
\end_inset


\family typewriter
python-config --ldflags
\family default

\begin_inset Quotes erd
\end_inset

.
 Set the value of 
\family typewriter
MET_PYTHON_LD 
\family default
to the output of that command.
\end_layout

\begin_layout Standard
Make sure that these are set as environment variables or that you have included
 them on the command line prior to running 
\family typewriter
configure
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vskip 0.1in
\backslash
centerline{
\backslash
hbox to 3.0in{
\backslash
hrulefill}}
\backslash
vskip 0.1in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We now describe how to write Python scripts so that the MET tools may extract
 2D gridded data fields from them.
 Currently, MET offers two ways to interact with Python scripts: by using
 NumPy arrays or by using Xarray objects.
 The interface to be used (NumPy or Xarray) is specified on the command
 line (more on this later).
 The user's scripts can use any Python libraries that are supported by the
 local Python installation, or any personal or institutional libraries or
 code that are desired in order to implement the Python script, so long
 as at the data has been loaded into either a NumPy array or an Xarray object
 by the end of the script.
 This offers advantages when using data file formats that MET does not directly
 support.
 If there is Python code to read the data format, the user can use those
 tools to read the data, and then copy the data into a NumPy array or an
 Xarray object.
 MET can then ingest the data via the Python script.
 Note that whether a NumPy array or an Xarray object is used, the data should
 be stored as double precision floating point numbers.
 Using different data types, such as integers or single precision floating
 point numbers, will lead to unexpected results in MET.
\end_layout

\begin_layout Standard

\series bold
Using NumPy
\series default
.
 The data must be loaded into a 2D NumPy array named 
\family typewriter
met_data
\family default
.
 In addition there must be a Python dictionary named 
\family typewriter
attrs
\family default
 which contains metadata such as timestamps, grid projection and other informati
on.
 Here is an example 
\family typewriter
attrs
\family default
 dictionary:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

attrs = {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   'valid':     '20050807_120000',
\end_layout

\begin_layout Plain Layout

   'init':      '20050807_000000',
\end_layout

\begin_layout Plain Layout

   'lead':      '120000',
\end_layout

\begin_layout Plain Layout

   'accum':     '120000',
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   'name':      'Foo',
\end_layout

\begin_layout Plain Layout

   'long_name': 'FooBar',
\end_layout

\begin_layout Plain Layout

   'level':     'Surface',
\end_layout

\begin_layout Plain Layout

   'units':     'None',
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   'grid': {
\end_layout

\begin_layout Plain Layout

      'type': 'Lambert Conformal',
\end_layout

\begin_layout Plain Layout

      'hemisphere': 'N',
\end_layout

\begin_layout Plain Layout

      'name': 'FooGrid',
\end_layout

\begin_layout Plain Layout

      'scale_lat_1': 25.0,
\end_layout

\begin_layout Plain Layout

      'scale_lat_2': 25.0,
\end_layout

\begin_layout Plain Layout

      'lat_pin': 12.19,
\end_layout

\begin_layout Plain Layout

      'lon_pin': -135.459,
\end_layout

\begin_layout Plain Layout

      'x_pin': 0.0,
\end_layout

\begin_layout Plain Layout

      'y_pin': 0.0,
\end_layout

\begin_layout Plain Layout

      'lon_orient': -95.0,
\end_layout

\begin_layout Plain Layout

      'd_km': 40.635,
\end_layout

\begin_layout Plain Layout

      'r_km': 6371.2,
\end_layout

\begin_layout Plain Layout

      'nx': 185,
\end_layout

\begin_layout Plain Layout

      'ny': 129,
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the dictionary, valid time, intitialization time, lead time and accumulation
 time (if any) must be indicated by strings.
 Valid and initialization times must be given in YYYYMMDD[_HH[MMSS]] format,
 and lead and accumulation times must be given in HH[MMSS] format, where
 the square brackets indicate optional elements.
 The dictionary must also include strings for the name, long_name, level,
 and units to describe the data.
 The rest of the 
\family typewriter
attrs
\family default
 dictionary gives the grid size and projection information in the same format
 that is used in the netCDF files written out by the MET tools.
 Note that the 
\family typewriter
grid
\family default
 entry in the 
\family typewriter
attrs
\family default
 dictionary is itself a dictionary.
\end_layout

\begin_layout Standard

\series bold
Using Xarray Objects
\series default
.
 To use Xarray objects, a similar procecure to the NumPy case is followed.
 An Xarray object has a NumpyArray called 
\family typewriter
values
\family default
, and an attributes dictionary called 
\family typewriter
attrs
\family default
.
 The user must name the Xarray object to be 
\family typewriter
met_data
\family default
.
 When one of the MET tools runs the Python script, it will look for an Xarray
 object named 
\family typewriter
met_data
\family default
, and will retrieve the data and metadata from the 
\family typewriter
values
\family default
 and 
\family typewriter
attrs
\family default
 parts, respectively, of the Xarray object.
 The Xarray 
\family typewriter
attrs
\family default
 dictionary is populated in the same way as for the NumPy interface.
 The 
\family typewriter
values
\family default
 Numpy array part of the Xarray object is also populated in the same way
 as the NumPy case.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vskip 0.1in
\backslash
centerline{
\backslash
hbox to 3.0in{
\backslash
hrulefill}}
\backslash
vskip 0.1in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It remains to discuss command lines and config files.
 On the command line for any of the MET tools which will be obtaining its
 data from a Python script rather than directly from a data file, the user
 should specify either PYTHON_NUMPY or PYTHON_XARRAY wherever a (forecast
 or observation) data file name would normally be given.
 Then in the 
\family typewriter
name
\family default
 entry of the config file dictionaries for the forecast or observation data,
 the user should list the Python script to be run followed by any command
 line arguments for that script.
 Note that for tools like MODE that take two data files, it would be entirely
 possible to use the NumPy interface for one file and the Xarray interface
 for the other.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vskip 0.1in
\backslash
centerline{
\backslash
hbox to 3.0in{
\backslash
hrulefill}}
\backslash
vskip 0.1in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listed below is an example of running the 
\family typewriter
plot_data_plane
\family default
 tool to call a Python script for data that is included with the MET release
 tarball.
 Assuming the MET executables are in your path, this example may be run
 from the top-level MET source code directory.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

plot_data_plane PYTHON_NUMPY fcst.ps 
\backslash

\end_layout

\begin_layout Plain Layout

  'name="scripts/python/read_ascii_numpy.py data/python/fcst.txt FCST";' 
\backslash

\end_layout

\begin_layout Plain Layout

  -title "Python enabled plot_data_plane"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first argument for the 
\family typewriter
plot_data_plane
\family default
 tool is the gridded data file to be read.
 When calling a NumPy Python script, set this to the constant string PYTHON_NUMP
Y.
 The second argument is the name of the output PostScript file to be written.
 The third argument is a string describing the data to be plotted.
 When calling a Python script, set 
\family typewriter
name
\family default
 to the Python script to be run along with command line arguments.
 Lastly, the 
\family typewriter
-title
\family default
 option is used to add a title to the plot.
 Note that any print statements included in the Python script will be printed
 to the screen.
 The above example results in the following log messages.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

DEBUG 1: Opening data file: PYTHON_NUMPY
\end_layout

\begin_layout Plain Layout

Input File: 'data/python/fcst.txt'
\end_layout

\begin_layout Plain Layout

Data Name : 'FCST'
\end_layout

\begin_layout Plain Layout

Data Shape: (129, 185)
\end_layout

\begin_layout Plain Layout

Data Type:  dtype('float64')
\end_layout

\begin_layout Plain Layout

Attributes: {'name': 'FCST',  'long_name': 'FCST_word',
\end_layout

\begin_layout Plain Layout

             'level': 'Surface', 'units': 'None',
\end_layout

\begin_layout Plain Layout

             'init': '20050807_000000', 'valid': '20050807_120000',
\end_layout

\begin_layout Plain Layout

             'lead': '120000',  'accum': '120000'
\end_layout

\begin_layout Plain Layout

             'grid': {...} } 
\end_layout

\begin_layout Plain Layout

DEBUG 1: Creating postscript file: fcst.ps
\end_layout

\end_inset


\end_layout

\end_body
\end_document
