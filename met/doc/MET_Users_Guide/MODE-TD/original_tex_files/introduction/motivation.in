

////////////////////////////////////////////////////////////////////////


\SubSection{Motivation}


////////////////////////////////////////////////////////////////////////


MODE Time Domain (MTD) is an extension of the MODE object-based
approach to verification.  In addition to incorporating spatial 
information, MTD utilizes the time dimension to get at temporal
aspects of forecast verification.  Since the two spatial dimensions
of traditional meteorological forecasts are retained in addition
to the time dimension, the method in inherently three 
dimensional.  Given that, however, the overall methodology
has deliberately been kept as similar as possible to that of
traditional MODE.

//  \Comment{Example plot of 3D objects, here.}

\par

A plot of some MTD precipitation objects is shown 
// over the United States 
in illust_number(3d_color_fig).
The colors indicate longitude, with red in the east
moving through the spectrum to blue in the west.
Time increases vertically in this plot (and in most of the spacetime 
diagrams in this users' guide).
A few things are worthy of note in this figure.  First, the
tendency of storm systems to move from west to east over time 
shows up clearly.  Second, tracking of storm objects over time
is easily done: if we want to know if a storm at one time is
a later version of a storm at an earlier time, we need only 
see if they are part of the same 3D spacetime object.
Lastly, storms splitting up or merging over time are handled
easily by this method.

\par


   //  MODE                   MTD
   //
   //  Location errors        Timing errors.
   //  Intensity errors       Speed & direction errors.
   //  Shape errors           Buildup & decay errors.
   //  Size errors            Duration errors.
   //  Orientation errors

The 2D (or traditional) MODE approach to object-base verification
enabled users to analyze forecasts in terms of location errors, 
intensity errors and shape, size and orientation errors.
MTD retains all of that capability, and adds new classes
of forecast errors involving time information:
speed and direction errors, 
buildup and decay errors, and timing and duration errors.
This opens up new ways of analyzing forecast quality.


\par

In the past, many MET users have performed separate MODE runs at
a series of forecast valid times and analyzed the resulting 
object attributes, matches and merges as functions of time 
in an effort
to incorporate temporal information in assessments
of forecast quality.  MTD was developed as a way to address this
need in a more systematic way.
Most of the information obtained from such multiple coordinated
MODE runs can be obtained more simply from MTD.


\par

At first glance, the addition of a third dimension would seem 
to entail no difficulties other than increased memory and processing
requirements to handle the three-dimensional datasets and objects, 
and that would indeed be largely true of an extension of
MODE that used three spatial dimensions.
In fact, the implementation of MTD entailed both conceptual 
difficulties (mostly due to the fact that there is no distance
function in spacetime, so some MODE attributes, such as
centroid distance, no longer even made sense), 
and engineering difficulties brought on by the need to 
redesign several core MODE algorithms for speed.
It is planned that in the future some of these 
improved algorithms will be incorporated into
MODE.

\par

In this users' guide, we will assume that the reader has
a basic familiarity with traditional MODE, its internal
operation, (convolution thresholding, fuzzy logic
matching and merging) and its output.
We will not review these things here.  Instead, we will point
out differences in MTD from the way traditional MODE does things
when they come up.
This release is a beta version of MTD, intended mostly to 
encourage users to experiment with it and give us feedback
and suggestions to be used in a more robust MTD release
in the future.








////////////////////////////////////////////////////////////////////////


///////////////////////////
illust_insert(3d_color_fig)
///////////////////////////

// //////////////////////
// illust_insert(xyt_fig)
// //////////////////////


////////////////////////////////////////////////////////////////////////



